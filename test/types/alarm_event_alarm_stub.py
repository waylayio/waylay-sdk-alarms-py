# coding: utf-8
"""Waylay Alarms model tests.

This code was generated from the OpenAPI documentation of 'Waylay Alarms'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.alarms.models.alarm_event_alarm import AlarmEventAlarm

    AlarmEventAlarmAdapter = TypeAdapter(AlarmEventAlarm)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

alarm_event_alarm_model_schema = json.loads(
    r"""{
  "title" : "AlarmEventAlarm",
  "required" : [ "count", "creationTime", "id", "severity", "source", "status", "tenantId", "text", "timestamp", "type" ],
  "type" : "object",
  "properties" : {
    "id" : {
      "$ref" : "#/components/schemas/AlarmId"
    },
    "tenantId" : {
      "title" : "tenantId",
      "type" : "string"
    },
    "creationTime" : {
      "$ref" : "#/components/schemas/SO8601Timestamp"
    },
    "type" : {
      "$ref" : "#/components/schemas/AlarmType"
    },
    "text" : {
      "$ref" : "#/components/schemas/AlarmText"
    },
    "timestamp" : {
      "$ref" : "#/components/schemas/SO8601Timestamp"
    },
    "source" : {
      "$ref" : "#/components/schemas/IdObject"
    },
    "severity" : {
      "$ref" : "#/components/schemas/AlarmSeverity"
    },
    "status" : {
      "$ref" : "#/components/schemas/AlarmStatus"
    },
    "count" : {
      "title" : "count",
      "minimum" : 1,
      "type" : "integer"
    }
  },
  "description" : "Summary representation of an alarm."
}
""",
    object_hook=with_example_provider,
)
alarm_event_alarm_model_schema.update({"definitions": MODEL_DEFINITIONS})

alarm_event_alarm_faker = JSF(alarm_event_alarm_model_schema, allow_none_optionals=1)


class AlarmEventAlarmStub:
    """AlarmEventAlarm unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return alarm_event_alarm_faker.generate(use_defaults=True, use_examples=True)

    @classmethod
    def create_instance(cls) -> "AlarmEventAlarm":
        """Create AlarmEventAlarm stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if json is None:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(
                AlarmEventAlarmAdapter.json_schema(), allow_none_optionals=1
            )
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return AlarmEventAlarmAdapter.validate_python(
            json, context={"skip_validation": True}
        )
