# coding: utf-8
"""Waylay Alarms model tests.

This code was generated from the OpenAPI documentation of 'Waylay Alarms'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json

from jsf import JSF
from pydantic import TypeAdapter

from ..openapi import MODEL_DEFINITIONS, with_example_provider

try:
    from waylay.services.alarms.models.alarm_audit_record import AlarmAuditRecord

    AlarmAuditRecordAdapter = TypeAdapter(AlarmAuditRecord)
    MODELS_AVAILABLE = True
except ImportError as exc:
    MODELS_AVAILABLE = False

alarm_audit_record_model_schema = json.loads(
    r"""{
  "title" : "AlarmAuditRecord",
  "required" : [ "id", "text", "timestamp", "type" ],
  "type" : "object",
  "properties" : {
    "id" : {
      "title" : "id",
      "type" : "string",
      "example" : "ca0c5181-11dc-47dd-aeb3-a7a508ea1599\""
    },
    "type" : {
      "$ref" : "#/components/schemas/AlarmEventType"
    },
    "text" : {
      "title" : "text",
      "type" : "string",
      "description" : "Text describing the change",
      "example" : "Alarm raised"
    },
    "timestamp" : {
      "title" : "timestamp",
      "allOf" : [ {
        "$ref" : "#/components/schemas/SO8601Timestamp"
      }, {
        "description" : "timestamp when the change happened"
      } ]
    }
  }
}
""",
    object_hook=with_example_provider,
)
alarm_audit_record_model_schema.update({"definitions": MODEL_DEFINITIONS})

alarm_audit_record_faker = JSF(alarm_audit_record_model_schema, allow_none_optionals=1)


class AlarmAuditRecordStub:
    """AlarmAuditRecord unit test stubs."""

    @classmethod
    def create_json(cls):
        """Create a dict stub instance."""
        return alarm_audit_record_faker.generate(use_defaults=True, use_examples=True)

    @classmethod
    def create_instance(cls) -> "AlarmAuditRecord":
        """Create AlarmAuditRecord stub instance."""
        if not MODELS_AVAILABLE:
            raise ImportError("Models must be installed to create class stubs")
        json = cls.create_json()
        if not json:
            # use backup example based on the pydantic model schema
            backup_faker = JSF(
                AlarmAuditRecordAdapter.json_schema(), allow_none_optionals=1
            )
            json = backup_faker.generate(use_defaults=True, use_examples=True)
        return AlarmAuditRecordAdapter.validate_python(
            json, context={"skip_validation": True}
        )
