# coding: utf-8
"""Waylay Alarms api tests.

This code was generated from the OpenAPI documentation of 'Waylay Alarms'

Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""

import json
import re
from importlib.util import find_spec
from typing import Union
from urllib.parse import quote

import pytest
from pytest_httpx import HTTPXMock
from typeguard import check_type
from waylay.sdk import ApiClient, WaylayClient
from waylay.sdk.api._models import Model
from waylay.services.alarms.api import AlarmsBatchOperationsApi
from waylay.services.alarms.service import AlarmsService

from ..types.batch_operation_enqueued_stub import BatchOperationEnqueuedStub
from ..types.batch_operation_results_stub import BatchOperationResultsStub

MODELS_AVAILABLE = (
    True if find_spec("waylay.services.alarms.models") is not None else False
)

if MODELS_AVAILABLE:
    from waylay.services.alarms.models import (
        BatchOperationEnqueued,
        BatchOperationResults,
    )


# some mappings that are needed for some <example> interpolations
null, true, false = None, True, False


@pytest.fixture
def alarms_batch_operations_api(
    waylay_api_client: ApiClient,
) -> AlarmsBatchOperationsApi:
    return AlarmsBatchOperationsApi(waylay_api_client)


def test_registered(waylay_client: WaylayClient):
    """Test that AlarmsBatchOperationsApi api is registered in the sdk client."""
    assert isinstance(
        waylay_client.alarms.alarms_batch_operations, AlarmsBatchOperationsApi
    )


def _get_set_mock_response(httpx_mock: HTTPXMock, gateway_url: str, batchId: str):
    mock_response = BatchOperationResultsStub.create_json()
    httpx_mock_kwargs = {
        "method": "GET",
        "url": re.compile(f"^{gateway_url}/alarms/v1/batch/{batchId}(\\?.*)?"),
        "content": json.dumps(mock_response, default=str),
        "status_code": 200,
    }
    httpx_mock.add_response(**httpx_mock_kwargs)


@pytest.mark.asyncio
@pytest.mark.skipif(not MODELS_AVAILABLE, reason="Types not installed.")
async def test_get(service: AlarmsService, gateway_url: str, httpx_mock: HTTPXMock):
    """Test case for get
    Get Alarms Batch Operation Status
    """
    # set path params
    batchId = "batch_id_example"

    kwargs = {}
    _get_set_mock_response(httpx_mock, gateway_url, quote(str(batchId)))
    resp = await service.alarms_batch_operations.get(batchId, **kwargs)
    check_type(resp, Union[BatchOperationResults,])


@pytest.mark.asyncio
@pytest.mark.skipif(MODELS_AVAILABLE, reason="Types installed.")
async def test_get_without_types(
    service: AlarmsService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for get with models not installed
    Get Alarms Batch Operation Status
    """
    # set path params
    batchId = "batch_id_example"

    kwargs = {}
    _get_set_mock_response(httpx_mock, gateway_url, quote(str(batchId)))
    resp = await service.alarms_batch_operations.get(batchId, **kwargs)
    check_type(resp, Model)


def _start_set_mock_response(httpx_mock: HTTPXMock, gateway_url: str):
    mock_response = BatchOperationEnqueuedStub.create_json()
    httpx_mock_kwargs = {
        "method": "POST",
        "url": re.compile(f"^{gateway_url}/alarms/v1/batch(\\?.*)?"),
        "content": json.dumps(mock_response, default=str),
        "status_code": 202,
    }
    httpx_mock.add_response(**httpx_mock_kwargs)


@pytest.mark.asyncio
@pytest.mark.skipif(not MODELS_AVAILABLE, reason="Types not installed.")
async def test_start(service: AlarmsService, gateway_url: str, httpx_mock: HTTPXMock):
    """Test case for start
    Start Alarms Batch Operation
    """
    # set path params
    kwargs = {}
    _start_set_mock_response(httpx_mock, gateway_url)
    resp = await service.alarms_batch_operations.start(**kwargs)
    check_type(resp, Union[BatchOperationEnqueued,])


@pytest.mark.asyncio
@pytest.mark.skipif(MODELS_AVAILABLE, reason="Types installed.")
async def test_start_without_types(
    service: AlarmsService, gateway_url: str, httpx_mock: HTTPXMock
):
    """Test case for start with models not installed
    Start Alarms Batch Operation
    """
    # set path params
    kwargs = {}
    _start_set_mock_response(httpx_mock, gateway_url)
    resp = await service.alarms_batch_operations.start(**kwargs)
    check_type(resp, Model)
